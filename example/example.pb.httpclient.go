// Code generated by protoc-gen-httpclient. DO NOT EDIT.
package example

import (
	cb "github.com/bifrostcloud/protoc-gen-httpclient/pkg/client/circuit-breaker"

	"io/ioutil"

	stacktrace "github.com/palantir/stacktrace"

	utils "github.com/bifrostcloud/protoc-gen-httpclient/pkg/utils"

	"encoding/json"

	"strings"

	basic "github.com/bifrostcloud/protoc-gen-httpclient/pkg/client/basic"

	"net/http"

	"io"

	"net/url"
)

type RequestManipulator func(*http.Request) error

type DaemonServiceWithBasicAuth struct {
	Endpoint string
	Username string
	Password string
}

// NewDaemonServiceWithBasicAuth - sets up a new DaemonService client with basic authentication scheme
func NewDaemonServiceWithBasicAuth(username, password string) *DaemonServiceWithBasicAuth {
	return &DaemonServiceWithBasicAuth{
		Username: username,
		Password: password,
	}
}

func (srv *DaemonServiceWithBasicAuth) GetStop(arg *StopRequest, rms []RequestManipulator, clientopts ...cb.Option) (*StopResponse, error) {
	c := cb.New(clientopts...)

	request, err := http.NewRequest(http.MethodGet, `http://localhost:8080/daemon/stop`, nil)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[GET] request creation failed for DaemonService.GetStop with input arg %v", arg)
	}

	request.Header.Set("User-Agent", "Sia-Agent")
	basicauth := utils.BasicAuth(srv.Username, srv.Password)
	request.Header.Set("Authorization", "Basic "+basicauth)
	for _, r := range rms {
		err := r(request)
		if err != nil {
			return nil, stacktrace.Propagate(err, "request modification failed for DaemonService.GetStop with input arg %v", arg)
		}
	}
	response, err := c.Do(request)
	if err != nil {
		return nil, err
	}
	result := &StopResponse{}
	err = json.NewDecoder(response.Body).Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (srv *DaemonServiceWithBasicAuth) PutVersion(arg *VersionRequest, body io.Reader, rms []RequestManipulator, clientopts ...basic.Option) (*VersionResponse, error) {
	c := basic.New(clientopts...)

	request, err := http.NewRequest(http.MethodPut, `http://localhost:8080/daemon/version`, body)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[PUT] request creation failed for DaemonService.PutVersion with input arg %v", arg)
	}

	request.Header.Set("User-Agent", "Sia-Agent")
	basicauth := utils.BasicAuth(srv.Username, srv.Password)
	request.Header.Set("Authorization", "Basic "+basicauth)
	for _, r := range rms {
		err := r(request)
		if err != nil {
			return nil, stacktrace.Propagate(err, "request modification failed for DaemonService.PutVersion with input arg %v", arg)
		}
	}
	response, err := c.Do(request)
	if err != nil {
		return nil, err
	}
	result := &VersionResponse{}
	err = json.NewDecoder(response.Body).Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (srv *DaemonServiceWithBasicAuth) DeleteInfo(arg *VersionRequest, rms []RequestManipulator, clientopts ...basic.Option) (*VersionResponse, error) {
	c := basic.New(clientopts...)

	request, err := http.NewRequest(http.MethodDelete, `http://localhost:8080/host`, nil)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[DELETE] request creation failed for DaemonService.DeleteInfo with input arg %v", arg)
	}

	request.Header.Set("User-Agent", "Sia-Agent")
	basicauth := utils.BasicAuth(srv.Username, srv.Password)
	request.Header.Set("Authorization", "Basic "+basicauth)
	for _, r := range rms {
		err := r(request)
		if err != nil {
			return nil, stacktrace.Propagate(err, "request modification failed for DaemonService.DeleteInfo with input arg %v", arg)
		}
	}
	response, err := c.Do(request)
	if err != nil {
		return nil, err
	}
	result := &VersionResponse{}
	err = json.NewDecoder(response.Body).Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (srv *DaemonServiceWithBasicAuth) PostConfigure(arg *VersionRequest, body io.Reader, rms []RequestManipulator, clientopts ...basic.Option) (*VersionResponse, error) {
	c := basic.New(clientopts...)

	request, err := http.NewRequest(http.MethodPost, `http://localhost:8080/host`, body)
	if err != nil {
		return nil, stacktrace.Propagate(err, "[POST] request creation failed for DaemonService.PostConfigure with input arg %v", arg)
	}

	if body == nil {
		if request.Form == nil {
			request.Form = url.Values{}
		}

		request.Form.Set(`key-`, `value-1`)

		request.Form.Set(`key-2`, `value-2`)

		request.Body = ioutil.NopCloser(strings.NewReader(request.Form.Encode()))
		request.ContentLength = int64(len(request.Form.Encode()))
	}

	request.Header.Set("User-Agent", "Sia-Agent")
	basicauth := utils.BasicAuth(srv.Username, srv.Password)
	request.Header.Set("Authorization", "Basic "+basicauth)
	for _, r := range rms {
		err := r(request)
		if err != nil {
			return nil, stacktrace.Propagate(err, "request modification failed for DaemonService.PostConfigure with input arg %v", arg)
		}
	}
	response, err := c.Do(request)
	if err != nil {
		return nil, err
	}
	result := &VersionResponse{}
	err = json.NewDecoder(response.Body).Decode(result)
	if err != nil {
		return nil, err
	}
	return result, nil
}
